name: Build Millennium (Windows)

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  
jobs:
  build:
    runs-on: windows-latest

    env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true # allow fortnite wallhacks
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    strategy:
      fail-fast: false
      matrix:
        include:
          - sys: mingw32
            env: i686

    steps:

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up cache for Python source
      uses: actions/cache@v3
      id: build-cache
      with:
        path: |
          Python-3.11.8/PCbuild/win32
        key: ${{ runner.os }}-python-3.11.8-build
        restore-keys: |
          ${{ runner.os }}-python-3.11.8-build-  

    - name: (Python) Download 3.11.8 win32 source
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: |

        # download python 3.11.8 source code
        curl -o Python-3.11.8.tgz https://www.python.org/ftp/python/3.11.8/Python-3.11.8.tgz
        # extract the tarball
        tar -xzvf Python-3.11.8.tgz >nul 2>&1

    - name: (Python) Stage Python 3.11.8 static build
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: |
        cd Python-3.11.8

        $vcxprojPath = "PCbuild/pythoncore.vcxproj"
        $content = Get-Content $vcxprojPath -Raw  # Read the entire content as a single string

        $pattern = '</ClCompile>'
        $replacement = @"
        <RuntimeLibrary Condition="'`$(Configuration)|`$(Platform)'=='Release|Win32'">MultiThreaded</RuntimeLibrary>
        <RuntimeLibrary Condition="'`$(Configuration)|`$(Platform)'=='Debug|Win32'">MultiThreadedDebug</RuntimeLibrary>
        </ClCompile>
        "@

        $modifiedContent = $content -replace [regex]::Escape($pattern), $replacement
        $modifiedContent | Set-Content $vcxprojPath

      shell: pwsh

    - name: (Python) Build 3.11.8
      if: steps.build-cache.outputs.cache-hit != 'true'
      run: |

        cd Python-3.11.8
        # get python external libs before build
        ./PCbuild/get_externals.bat
        # build python 3.11.8 as win32 and release
        msbuild PCBuild/pcbuild.sln /p:Configuration=Release /p:Platform=Win32 /p:RuntimeLibrary=MT
        msbuild PCBuild/pcbuild.sln /p:Configuration=Debug /p:Platform=Win32 /p:RuntimeLibrary=MT
        # verify python is installed
        PCbuild/win32/python.exe --version

    - name: Upload Python artifacts
      run: |

        mkdir D:/a/Millennium/Millennium/build/python
        # Move the python311.dll binary to the release directory
        copy D:/a/Millennium/Millennium/Python-3.11.8/PCbuild/win32/python311.dll D:/a/Millennium/Millennium/build/python/python311.dll
        copy D:/a/Millennium/Millennium/Python-3.11.8/PCbuild/win32/python311_d.dll D:/a/Millennium/Millennium/build/python/python311_d.dll
        copy D:/a/Millennium/Millennium/Python-3.11.8/PCbuild/win32/python311.lib D:/a/Millennium/Millennium/build/python/python311.lib
        copy D:/a/Millennium/Millennium/Python-3.11.8/PCbuild/win32/python311_d.lib D:/a/Millennium/Millennium/build/python/python311_d.lib

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: python 3.11.8 build libraries
        path: D:/a/Millennium/Millennium/build/python

    - name: Install prerequisites
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.sys }}
        install: >-
          mingw-w64-${{ matrix.env }}-libgcrypt
          mingw-w64-${{ matrix.env }}-gcc
          mingw-w64-${{ matrix.env }}-cmake
          mingw-w64-${{ matrix.env }}-ninja

    - name: (Dependency) Install vcpkg
      shell: pwsh
      run: |

        # bootstrap and install vcpkg
        ./vendor/vcpkg/bootstrap-vcpkg.bat
        ./vendor/vcpkg/vcpkg integrate install

    - name: (Generator) Configure CMake
      shell: msys2 {0}
      run: |
        ninja --version
        cmake --preset=windows-mingw-release -DGITHUB_ACTION_BUILD=ON

    - name: Build Millennium
      shell: msys2 {0}
      run: |

        mkdir D:/a/Millennium/Millennium/build/artifacts
        # build millennium with msvc; x86; release
        cmake --build build --config Release
        ls ./build

        # Move the python311.dll binary to the release directory
        cp D:/a/Millennium/Millennium/Python-3.11.8/PCbuild/win32/python311.dll D:/a/Millennium/Millennium/build/artifacts/python311.dll
        cp /d/a/Millennium/Millennium/build/user32.dll D:/a/Millennium/Millennium/build/artifacts

    
    - name: Set up Git
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'

    - name: Get the latest tag
      id: get-latest-tag
      run: echo "::set-output name=tag::$(git describe --tags --abbrev=0)"

    - name: Generate release notes
      id: generate-notes
      run: |
        latest_tag=$(git describe --tags --abbrev=0)
        commits=$(git log $latest_tag..HEAD --pretty=format:"%s by @%an in #%h")
        echo "## What's Changed" > release-notes.md
        echo "$commits" >> release-notes.md
        cat release-notes.md
        echo "::set-output name=notes::$(cat release-notes.md)"

    - name: Bump version and create new tag
      id: bump-version
      run: |
        latest_tag=$(git describe --tags --abbrev=0)
        echo "Latest tag: $latest_tag"
        IFS='.' read -ra ADDR <<< "$latest_tag"
        major=${ADDR[0]//[!0-9]/}
        minor=${ADDR[1]}
        patch=${ADDR[2]}
        new_patch=$((patch + 1))
        new_tag="v$major.$minor.$new_patch"
        echo "New tag: $new_tag"
        echo "::set-output name=new_tag::$new_tag"
        git tag $new_tag
        git push origin $new_tag

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.bump-version.outputs.new_tag }}
        name: Release ${{ steps.bump-version.outputs.new_tag }}
        body: ${{ steps.generate-notes.outputs.notes }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: millennium
        path: D:/a/Millennium/Millennium/build/artifacts